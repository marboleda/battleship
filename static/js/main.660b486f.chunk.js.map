{"version":3,"sources":["components/Grid.js","components/ShipComponent.js","components/Menu.js","game/Gameboard.js","game/Ship.js","App.js","index.js"],"names":["Grid","styled","div","Cell","props","color","isPlayerTurn","playerType","isGameOver","generateCellColor","gameboard","x","y","grid","drop","currentShipId","clickEnemyGrid","className","Array","keys","map","gridIndex","xCoord","yCoord","Number","toString","substring","id","onDragOver","e","preventDefault","onDrop","onClick","ShipDisplay","onBoard","orientation","ShipCell","shipComponent","drag","shipType","shipId","click","draggable","onDrag","type","shipLength","shipSquares","i","push","createShip","menu","orientations","clickShip","shipOnPlayerBoard","ShipComponent","gameBoard","gameBoardState","fill","ships","getGameboardState","placeShip","ship","getPlacementCoordinates","getOrientation","getLength","console","log","coordinatesOccupiedByShip","setCoordinatesOccupied","getShips","receiveAttack","coordinate","shipHit","forEach","getCoordinatesOccupied","shipCoordinate","hit","allShipsAreSunk","isSunk","length","startingCoordinates","timesHit","coordinatesOccupied","coordinates","getTimesHit","_","require","GameComponent","App","useState","selectedShipType","setSelectedShipType","setCurrentShipId","shipOrientations","setShipOrientations","shipPlaced","setShipPlaced","Gameboard","playerGameboard","setPlayerGameboard","playerGameboardState","setPlayerGameboardState","randomEnemyGameboard","randomCoords","randomOrientation","validPlacement","index","Math","floor","random","round","Ship","generateRandomEnemyGameboard","computerGameboard","setComputerGameboard","computerGameboardState","setComputerGameboardState","setIsPlayerTurn","setIsGameOver","handleDropShip","updatedGameboard","updatedShipsPlacedArray","cloneDeep","every","placed","handleClickEnemyGrid","gridType","newComputerGameboard","move","moveX","moveY","newPlayerGameboard","attackIsValid","takeComputerTurn","Menu","newOrientation","updatedOrientations","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2wBAGA,IAAMA,EAAOC,IAAOC,IAAV,KAUJC,EAAOF,IAAOC,IAAV,KAGc,SAAAE,GAAK,OAAIA,EAAMC,SAEX,SAAAD,GAAK,OAA6B,IAAvBA,EAAME,cAAgD,MAArBF,EAAMG,aAA6C,IAArBH,EAAMI,WAClE,UACCJ,EAAMC,SAI3CI,EAAoB,SAACC,EAAWH,EAAYI,EAAGC,GACjD,OAAwB,IAApBF,EAAUE,GAAGD,IAA2B,MAAfJ,EAClB,QACoB,IAApBG,EAAUE,GAAGD,GACb,QACoB,IAApBD,EAAUE,GAAGD,GACb,MAEA,SAsCAE,EAlCF,SAACT,GAAW,IAEbG,EAAyFH,EAAzFG,WAAYO,EAA6EV,EAA7EU,KAAMJ,EAAuEN,EAAvEM,UAAWK,EAA4DX,EAA5DW,cAAeT,EAA6CF,EAA7CE,aAAcE,EAA+BJ,EAA/BI,WAAYQ,EAAmBZ,EAAnBY,eAK9E,OACI,sBAAKC,UAAY,OAAjB,UACI,6BAAqB,MAAfV,EAAsB,MAAQ,UACpC,cAACP,EAAD,UACK,YAAIkB,MAAM,KAAKC,QAAQC,KAAI,SAACC,GACzB,IAAMC,EAAUD,EAAY,GACtBE,EAAUF,EAAY,GAAM,EAAIG,OAAOH,EAAUI,WAAWC,UAAU,EAAE,IAC9E,OAAO,cAACvB,EAAD,CACKwB,GAAE,UAAKpB,GAAL,OAAkBc,GACpBO,WAAY,SAACC,GAAOA,EAAEC,kBACtBC,OAAQ,SAACF,GACOA,EAAEC,iBACFhB,EAAKP,EAAY,CAAEe,EAAQC,GAAUR,IAErDV,MAAOI,EAAkBC,EAAWH,EAAYe,EAAOC,GACvDjB,aAAcA,EACdE,WAAYA,EACZD,WAAYA,EACZyB,QAAS,SAACH,GAAD,OAAOb,EAAe,CAACM,EAAQC,GAAShB,EAAYD,e,2XC1D7F,IAAM2B,EAAchC,IAAOC,IAAV,KACF,SAAAE,GAAK,OAAsB,IAAlBA,EAAM8B,QAAoB,OAAS,UACrC,SAAA9B,GAAK,OAA0B,IAAtBA,EAAM+B,YAAoB,MAAQ,YAK3DC,EAAWnC,IAAOC,IAAV,KA0DCmC,EAhDO,SAACjC,GAAW,IAEtBkC,EAAwDlC,EAAxDkC,KAAMC,EAAkDnC,EAAlDmC,SAAUC,EAAwCpC,EAAxCoC,OAAQL,EAAgC/B,EAAhC+B,YAAaM,EAAmBrC,EAAnBqC,MAAOP,EAAY9B,EAAZ8B,QAgCpD,OACI,cAACD,EAAD,CACIS,WAAS,EACTC,OAAQ,WAAOL,EAAKC,EAAUC,IAC9BL,YAAaA,EACbD,QAASA,EACTF,QAAS,WAAOS,EAAMD,EAAwB,IAAhBL,EAAoB,EAAI,IACtDlB,UAAU,cANd,SA9Be,SAAC2B,GAChB,IAAIC,EACAC,EAAc,GAElB,OAAOF,GACH,IAAK,UACDC,EAAa,EACb,MACJ,IAAK,aACDA,EAAa,EACb,MACJ,IAAK,UAGL,IAAK,YACDA,EAAa,EACb,MACJ,IAAK,YACDA,EAAa,EAIrB,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAYE,IAC5BD,EAAYE,KAAK,cAACZ,EAAD,CAAUnB,UAAU,eAGzC,OAAO6B,EAYFG,CAAWV,MC7CTW,EAfF,SAAC9C,GAAW,IAEbkC,EAAoDlC,EAApDkC,KAAMa,EAA8C/C,EAA9C+C,aAAcC,EAAgChD,EAAhCgD,UAAWC,EAAqBjD,EAArBiD,kBAEvC,OACI,sBAAKpC,UAAU,OAAf,UACI,cAACqC,EAAD,CAAehB,KAAMA,EAAMG,MAAOW,EAAWZ,OAAO,IAAIL,YAAagB,EAAa,GAAIjB,QAASmB,EAAkB,GAAId,SAAS,YAC9H,cAACe,EAAD,CAAehB,KAAMA,EAAMG,MAAOW,EAAWZ,OAAO,IAAIL,YAAagB,EAAa,GAAIjB,QAASmB,EAAkB,GAAId,SAAS,eAC9H,cAACe,EAAD,CAAehB,KAAMA,EAAMG,MAAOW,EAAWZ,OAAO,IAAIL,YAAagB,EAAa,GAAIjB,QAASmB,EAAkB,GAAId,SAAS,YAC9H,cAACe,EAAD,CAAehB,KAAMA,EAAMG,MAAOW,EAAWZ,OAAO,IAAIL,YAAagB,EAAa,GAAIjB,QAASmB,EAAkB,GAAId,SAAS,cAC9H,cAACe,EAAD,CAAehB,KAAMA,EAAMG,MAAOW,EAAWZ,OAAO,IAAIL,YAAagB,EAAa,GAAIjB,QAASmB,EAAkB,GAAId,SAAS,kBC0F3HgB,EAvGG,WAEd,IAAMC,EAAiB,YAAItC,MAAM,KAAKE,KAAI,kBAAMF,MAAM,IAAIuC,KAAK,MAEzDC,EAAQ,GAgGd,MAAO,CAAEC,kBA7CiB,WACtB,OAAOH,GA4CiBI,UA9FV,SAACC,GACf,IAAMvC,EAASuC,EAAKC,0BAA0B,GACxCvC,EAASsC,EAAKC,0BAA0B,GACxC3B,EAAc0B,EAAKE,iBAEzB,GAAoB,IAAhB5B,EAAmB,CACnB,GAAI0B,EAAKG,YAAc1C,EAAS,GAE5B,OADA2C,QAAQC,IAAI,0BACL,KAEX,IAAK,IAAInB,EAAI,EAAGA,EAAIc,EAAKG,YAAajB,IAClC,GAAyC,IAArCS,EAAejC,GAAQD,EAAOyB,GAE9B,OADAkB,QAAQC,IAAI,uCACL,SAGZ,CACH,GAAIL,EAAKG,YAAczC,EAAS,GAE5B,OADA0C,QAAQC,IAAI,0BACL,KAEX,IAAK,IAAInB,EAAI,EAAGA,EAAIc,EAAKG,YAAajB,IAClC,GAAyC,IAArCS,EAAejC,EAAOwB,GAAGzB,GAEzB,OADA2C,QAAQC,IAAI,uCACL,KAMnB,IAAMC,EAA4B,GAElC,GAAoB,IAAhBhC,EACA,IAAK,IAAIY,EAAI,EAAGA,EAAIc,EAAKG,YAAajB,IAClCS,EAAejC,GAAQD,EAAOyB,GAAK,EACnCoB,EAA0BnB,KAAK,CAAC1B,EAAOyB,EAAGxB,SAG9C,IAAK,IAAIwB,EAAI,EAAGA,EAAIc,EAAKG,YAAajB,IAClCS,EAAejC,EAAOwB,GAAGzB,GAAU,EACnC6C,EAA0BnB,KAAK,CAAC1B,EAAQC,EAAOwB,IAIvDc,EAAKO,uBAAuBD,GAC5BT,EAAMV,KAAKa,IAiDwBQ,SAzCtB,WACb,OAAOX,GAwCsCY,cArC3B,SAACC,GACnB,GAAqD,IAAjDf,EAAee,EAAW,IAAIA,EAAW,KACQ,IAAjDf,EAAee,EAAW,IAAIA,EAAW,IACrC,OAAO,EAGf,IAAIC,GAAU,EAgBd,OAdAd,EAAMe,SAAQ,SAACZ,GACXA,EAAKa,yBAAyBD,SAAQ,SAACE,GAC/BA,EAAe,KAAOJ,EAAW,IAAMI,EAAe,KAAOJ,EAAW,KACxEf,EAAee,EAAW,IAAIA,EAAW,IAAM,EAC/CV,EAAKe,MACLJ,GAAU,SAKlBA,IACAhB,EAAee,EAAW,IAAIA,EAAW,IAAM,IAG5C,GAeqDM,gBAZxC,WACpB,IAAIA,GAAkB,EAQtB,OANAnB,EAAMe,SAAQ,SAACZ,GACNA,EAAKiB,WACND,GAAkB,MAInBA,KCvCAhB,EA1DF,SAACtB,GAA4D,IAGlEwC,EAHgBC,EAAiD,uDAA3B,CAAC,EAAE,GAAI7C,EAAoB,uDAAN,EAI3D8C,EAAW,EACXC,EAAsB,GAE1B,OAAO3C,GACH,IAAK,UACDwC,EAAS,EACT,MACJ,IAAK,aACDA,EAAS,EACT,MACJ,IAAK,UACL,IAAK,YACDA,EAAS,EACT,MACJ,IAAK,YACDA,EAAS,EAGjB,IAAMf,EAAY,WACd,OAAOe,GAGLhB,EAAiB,WACnB,OAAO5B,GAGL2B,EAA0B,WAC5B,OAAOkB,GAGLN,EAAyB,WAC3B,OAAOQ,GAGLd,EAAyB,SAACe,GAC5BD,EAAsBC,GAGpBP,EAAM,WACRK,KAGEG,EAAc,WAChB,OAAOH,GAGLH,EAAS,WACX,OAAOC,IAAWE,GAGtB,MAAO,CAAEjB,YAAWD,iBAAgBD,0BAAyBY,yBAAwBN,yBAAwBQ,MAAKQ,cAAaN,W,uLC/CnI,IAAMO,EAAIC,EAAQ,IAEZC,EAAgBtF,IAAOC,IAAV,KAqKJsF,EA7JH,WAEV,IAFgB,EAwCgCC,mBAAS,IAxCzC,mBAwCTC,EAxCS,KAwCSC,EAxCT,OAyC0BF,mBAAS,GAzCnC,mBAyCT1E,EAzCS,KAyCM6E,EAzCN,OA0CgCH,mBAASvE,MAAM,GAAGuC,KAAK,IA1CvD,mBA0CToC,EA1CS,KA0CSC,EA1CT,OA2CoBL,mBAASvE,MAAM,GAAGuC,MAAK,IA3C3C,mBA2CTsC,EA3CS,KA2CGC,EA3CH,OA4C8BP,mBAASQ,KA5CvC,mBA4CTC,EA5CS,KA4CQC,EA5CR,OA6CwCV,mBAASS,EAAgBvC,qBA7CjE,mBA6CTyC,EA7CS,KA6CaC,EA7Cb,OA8CkCZ,mBA5Cb,WACnC,IAAIa,EAAuBL,IACvBM,EAAe,CAAC,EAAG,GACnBC,EAAoB,EACpBC,GAAiB,EA+BrB,OA7BA,YAAIvF,MAAM,GAAGC,QAAQsD,SAAQ,SAACiC,GAC5B,MAAQD,GACNF,EAAe,CAACI,KAAKC,MAAsB,GAAhBD,KAAKE,UAAgBF,KAAKC,MAAsB,GAAhBD,KAAKE,WAChEL,EAAoBG,KAAKG,MAAMH,KAAKE,UACtB,IAAVH,EACuF,OAArFJ,EAAqB1C,UAAUmD,EAAK,UAAWR,EAAcC,MAC/DC,GAAiB,GAEA,IAAVC,EACmF,OAAxFJ,EAAqB1C,UAAUmD,EAAK,aAAcR,EAAcC,MAClEC,GAAiB,GAEA,IAAVC,EACgF,OAArFJ,EAAqB1C,UAAUmD,EAAK,UAAWR,EAAcC,MAC/DC,GAAiB,GAEA,IAAVC,EACkF,OAAvFJ,EAAqB1C,UAAUmD,EAAK,YAAaR,EAAcC,MACjEC,GAAiB,GAGwE,OAAvFH,EAAqB1C,UAAUmD,EAAK,YAAaR,EAAcC,MACjEC,GAAiB,GAIvBA,GAAiB,KAGZH,EASkDU,IA9C3C,mBA8CTC,EA9CS,KA8CUC,EA9CV,OA+C4CzB,mBAASwB,EAAkBtD,qBA/CvE,mBA+CTwD,EA/CS,KA+CeC,EA/Cf,OAgDwB3B,oBAAS,GAhDjC,mBAgDTnF,EAhDS,KAgDK+G,EAhDL,OAiDoB5B,oBAAS,GAjD7B,mBAiDTjF,EAjDS,KAiDG8G,EAjDH,KAyDVC,EAAiB,SAAChH,EAAY4E,EAAa3C,GAC/C,IAAIgF,EACAC,EAEE5D,EAAOkD,EAAKrB,EAAkBP,EAAaU,EAAiBrD,IAE/C,MAAfjC,IAA6C,IAAvBwF,EAAWvD,KACnCgF,EAAmBnC,EAAEqC,UAAUxB,GAC/BuB,EAAuB,YAAO1B,GAC9ByB,EAAiB5D,UAAUC,GAC3B4D,EAAwBjF,IAAU,EAClC2D,EAAmBqB,GACnBnB,EAAwBH,EAAgBvC,qBACxCqC,EAAcyB,GACdJ,EAAgBI,EAAwBE,OAAM,SAACC,GAAY,OAAkB,IAAXA,OAIpEjC,EAAoB,KA8BhBkC,EAAuB,SAAC1C,EAAa2C,EAAUxH,GACnD,GAAIA,GAA6B,MAAbwH,EAAkB,CACpC,IAAMC,EAAuB1C,EAAEqC,UAAUT,GACnBc,EAAqBzD,cAAca,KAEvD+B,EAAqBa,GACrBX,EAA0BW,EAAqBpE,qBAC/C0D,GAAgB,GACZU,EAAqBlD,kBAEvByC,GAAc,GA9BG,WAMvB,IALA,IAAIU,EAAOrB,KAAKC,MAAsB,IAAhBD,KAAKE,UACvBoB,EAASD,EAAO,GAChBE,EAASF,EAAO,GAAM,EAAIxG,OAAOwG,EAAKvG,WAAWC,UAAU,EAAE,IAC3DyG,EAAqB9C,EAAEqC,UAAUxB,GACnCkC,EAAgBD,EAAmB7D,cAAc,CAAC2D,EAAOC,KACrDE,GAENH,GADAD,EAAOrB,KAAKC,MAAsB,IAAhBD,KAAKE,WACP,GAChBqB,EAASF,EAAO,GAAM,EAAIxG,OAAOwG,EAAKvG,WAAWC,UAAU,EAAE,IAC7D0G,EAAgBD,EAAmB7D,cAAc,CAAC2D,EAAOC,IAEvDC,EAAmBtD,kBAErByC,GAAc,GAEdD,GAAgB,GAgBZgB,MAOR,OACE,sBAAKpH,UAAU,MAAf,UACE,4CACA,eAACsE,EAAD,CAAe5D,GAAG,OAAlB,UACE,cAAC,EAAD,CACEpB,WAAW,IACXO,KAAMyG,EACN7G,UAAW0F,EACXrF,cAAeA,EACfT,aAAcA,EACdE,WAAYA,EACZQ,eAAgB6G,IAElB,cAACS,EAAD,CACEhG,KAtFe,SAACC,EAAUC,GAChCmD,EAAoBpD,GACpBqD,EAAiBpD,IAqFXW,aAAc0C,EACdzC,UA7DgB,SAACZ,EAAQ+F,GAC/B,IAAMC,EAAmB,YAAO3C,GAChC2C,EAAoBhG,GAAU+F,EAC9BzC,EAAoB0C,IA2DdnF,kBAAmB0C,IAErB,cAAC,EAAD,CACExF,WAAW,IACXO,KAAMyG,EACN7G,UAAWyG,EACXpG,cAAeA,EACfT,aAAcA,EACdE,WAAYA,EACZQ,eAAgB6G,WClK1BY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.660b486f.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Grid = styled.div`\n    display: grid;\n    width: 30vw;\n    height: 30vh;\n    border-style: solid;\n    border-width: 2px;\n    grid-template-columns: auto auto auto auto auto auto auto auto auto auto;\n    grid-template-rows: auto auto auto auto auto auto auto auto auto auto;\n`;\n\nconst Cell = styled.div`\n    border-style: solid;\n    border-width: 0.5px;\n    background-color: ${props => props.color}; \n    :hover {\n        background-color: ${props => ((props.isPlayerTurn === true) && (props.playerType === 'c') && (props.isGameOver === false)) \n                                        ? '#D3D3D3' \n                                        : (props.color)}\n    }\n`;\n\nconst generateCellColor = (gameboard, playerType, x, y) => {\n    if (gameboard[y][x] === 1 && playerType === 'h') {\n        return \"black\";\n    } else if (gameboard[y][x] === 2) {\n        return \"green\";\n    } else if (gameboard[y][x] === 3) {\n        return \"red\";\n    } else {\n        return \"white\";\n    }\n}\n\nconst grid = (props) => {\n\n    const { playerType, drop, gameboard, currentShipId, isPlayerTurn, isGameOver, clickEnemyGrid } = props;\n\n\n\n\n    return (\n        <div className = 'grid'>\n            <h2>{(playerType === 'h') ? 'You' : 'Enemy'}</h2>\n            <Grid>\n                {[...Array(100).keys()].map((gridIndex) => {\n                    const xCoord = (gridIndex % 10);\n                    const yCoord = (gridIndex < 10) ? 0 : Number(gridIndex.toString().substring(0,1));\n                    return <Cell \n                                id={`${playerType}${gridIndex}`}\n                                onDragOver={(e) => {e.preventDefault()}}\n                                onDrop={(e) => {\n                                                e.preventDefault();\n                                                drop(playerType, [ xCoord, yCoord ], currentShipId)\n                                                }}\n                                color={generateCellColor(gameboard, playerType, xCoord,yCoord)}\n                                isPlayerTurn={isPlayerTurn}\n                                isGameOver={isGameOver}\n                                playerType={playerType}\n                                onClick={(e) => clickEnemyGrid([xCoord, yCoord], playerType, isPlayerTurn)}\n                            >\n                            </Cell>\n                })}\n            </Grid>\n        </div>\n    );\n};\n\nexport default grid;","import React from 'react';\nimport styled from 'styled-components';\n\nconst ShipDisplay = styled.div`\n    display: ${props => props.onBoard === false ? \"flex\" : \"none\"};\n    flex-direction: ${props => props.orientation === 0 ? \"row\" : \"column\"};\n    margin-top: 10px;\n    margin-bottom: 10px;\n`;\n\nconst ShipCell = styled.div`\n    width: 3vw;\n    height: 3vh;\n    background-color: black;\n    border-style: solid;\n    border-color: white;\n    border-width: 0.5px;\n`;\n\n\nconst shipComponent = (props) => {\n\n    const { drag, shipType, shipId, orientation, click, onBoard } = props;\n\n\n    const createShip = (type) => {\n        let shipLength;\n        let shipSquares = [];\n\n        switch(type) {\n            case 'carrier':\n                shipLength = 5;\n                break;\n            case 'battleship':\n                shipLength = 4;\n                break;\n            case 'cruiser':\n                shipLength = 3;\n                break;\n            case 'submarine':\n                shipLength = 3;\n                break;\n            case 'destroyer':\n                shipLength = 2;\n                break;\n        }\n\n        for (let i = 0; i < shipLength; i++) {\n            shipSquares.push(<ShipCell className='ship-cell' />);\n        }\n\n        return shipSquares;\n    }\n\n    return (\n        <ShipDisplay\n            draggable\n            onDrag={() => {drag(shipType, shipId)}}\n            orientation={orientation}\n            onBoard={onBoard}\n            onClick={() => {click(shipId, orientation === 1 ? 0 : 1)}}\n            className='shipDisplay' \n        >\n            {createShip(shipType)}\n        </ShipDisplay>\n    )\n};\n\nexport default shipComponent;","import React from 'react';\nimport ShipComponent from './ShipComponent'\n\nconst menu = (props) => {\n\n    const { drag, orientations, clickShip, shipOnPlayerBoard} = props;\n\n    return (\n        <div className='menu'>\n            <ShipComponent drag={drag} click={clickShip} shipId='0' orientation={orientations[0]} onBoard={shipOnPlayerBoard[0]} shipType='carrier'/>\n            <ShipComponent drag={drag} click={clickShip} shipId='1' orientation={orientations[1]} onBoard={shipOnPlayerBoard[1]} shipType='battleship' />\n            <ShipComponent drag={drag} click={clickShip} shipId='2' orientation={orientations[2]} onBoard={shipOnPlayerBoard[2]} shipType='cruiser'  />\n            <ShipComponent drag={drag} click={clickShip} shipId='3' orientation={orientations[3]} onBoard={shipOnPlayerBoard[3]} shipType='submarine' />\n            <ShipComponent drag={drag} click={clickShip} shipId='4' orientation={orientations[4]} onBoard={shipOnPlayerBoard[4]} shipType='destroyer' />\n        </div>\n    )\n};\n\nexport default menu;","const gameBoard = () => {\n\n    const gameBoardState = [...Array(10)].map(() => Array(10).fill(0));\n    // 0 indicates unfilled, 1 indicates filled with ship (not hit), 2 indicates hit with ship, 3 indicates hit without ship\n    const ships = [];\n\n    const placeShip = (ship) => {\n        const xCoord = ship.getPlacementCoordinates()[0];\n        const yCoord = ship.getPlacementCoordinates()[1];\n        const orientation = ship.getOrientation();\n\n        if (orientation === 0) {\n            if (ship.getLength() + xCoord > 10) {\n                console.log('Ship goes off the grid');\n                return null;\n            }\n            for (let i = 0; i < ship.getLength(); i++) {\n                if (gameBoardState[yCoord][xCoord+i] === 1) {\n                    console.log('Something is in the way of the ship');\n                    return null;\n                }\n            }\n        } else { //i.e. ship orientation is 1, or vertical\n            if (ship.getLength() + yCoord > 10) {\n                console.log('Ship goes off the grid');\n                return null;\n            }\n            for (let i = 0; i < ship.getLength(); i++) {\n                if (gameBoardState[yCoord+i][xCoord] === 1) {\n                    console.log('Something is in the way of the ship');\n                    return null;\n                }\n            }\n        }\n        \n        //If ship placement is valid\n        const coordinatesOccupiedByShip = [];\n\n        if (orientation === 0) {\n            for (let i = 0; i < ship.getLength(); i++) {\n                gameBoardState[yCoord][xCoord+i] = 1;\n                coordinatesOccupiedByShip.push([xCoord+i, yCoord]);\n            }\n        } else {\n            for (let i = 0; i < ship.getLength(); i++) {\n                gameBoardState[yCoord+i][xCoord] = 1;\n                coordinatesOccupiedByShip.push([xCoord, yCoord+i]);\n            }           \n        }\n\n        ship.setCoordinatesOccupied(coordinatesOccupiedByShip);\n        ships.push(ship);\n    }\n\n    \n    const getGameboardState = () => {\n        return gameBoardState;\n    }\n\n    const getShips = () => {\n        return ships;\n    }\n\n    const receiveAttack = (coordinate) => {\n        if (gameBoardState[coordinate[1]][coordinate[0]] === 2 ||\n            gameBoardState[coordinate[1]][coordinate[0]] === 3) {\n                return false;\n        }\n        \n        let shipHit = false;\n\n        ships.forEach((ship) => {\n            ship.getCoordinatesOccupied().forEach((shipCoordinate) => {\n                if (shipCoordinate[0] === coordinate[0] && shipCoordinate[1] === coordinate[1]) {\n                    gameBoardState[coordinate[1]][coordinate[0]] = 2;\n                    ship.hit();\n                    shipHit = true;\n                } \n            });\n        });\n\n        if(!shipHit) {\n            gameBoardState[coordinate[1]][coordinate[0]] = 3;\n        }\n\n        return true;\n    }\n\n    const allShipsAreSunk = () => {\n        let allShipsAreSunk = true;\n\n        ships.forEach((ship) => {\n            if (!ship.isSunk()) {\n                allShipsAreSunk = false;\n            }\n        });\n\n        return allShipsAreSunk;\n    }\n\n    return { getGameboardState, placeShip, getShips, receiveAttack, allShipsAreSunk }\n}\n\nexport default gameBoard;","const ship = (shipType, startingCoordinates = [0,0], orientation = 0) => {\n    /* orientation: 0 => horizontal, 1 => vertical */\n\n    let length;\n    let timesHit = 0;\n    let coordinatesOccupied = [];\n\n    switch(shipType) {\n        case 'carrier':\n            length = 5;\n            break;\n        case 'battleship':\n            length = 4;\n            break;\n        case 'cruiser':\n        case 'submarine':\n            length = 3;\n            break;\n        case 'destroyer':\n            length = 2;\n    }\n\n    const getLength = () => {\n        return length;\n    }\n\n    const getOrientation = () => {\n        return orientation;\n    }\n\n    const getPlacementCoordinates = () => {\n        return startingCoordinates;\n    }\n\n    const getCoordinatesOccupied = () => {\n        return coordinatesOccupied;\n    }\n\n    const setCoordinatesOccupied = (coordinates) => {\n        coordinatesOccupied = coordinates;\n    }\n\n    const hit = () => {\n        timesHit++;\n    }\n\n    const getTimesHit = () => {\n        return timesHit;\n    }\n    \n    const isSunk = () => {\n        return length === timesHit;\n    }\n\n    return { getLength, getOrientation, getPlacementCoordinates, getCoordinatesOccupied, setCoordinatesOccupied, hit, getTimesHit, isSunk }\n\n}\n\nexport default ship;","import React, { useState } from 'react';\nimport './App.css';\nimport Grid from './components/Grid';\nimport Menu from './components/Menu';\nimport Gameboard from './game/Gameboard'\nimport Ship from './game/Ship';\nimport styled from 'styled-components';\nconst _ = require('lodash');\n\nconst GameComponent = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 90vw;\n  justify-content: space-between;\n  margin: 0 auto;\n`;\n\nconst App = () => {\n\n  const generateRandomEnemyGameboard = () => {\n    let randomEnemyGameboard = Gameboard();\n    let randomCoords = [0, 0];\n    let randomOrientation = 0;\n    let validPlacement = false;\n\n    [...Array(5).keys()].forEach((index) => {\n      while (!validPlacement) {\n        randomCoords = [Math.floor(Math.random() * 10), Math.floor(Math.random() * 10)];\n        randomOrientation = Math.round(Math.random()) //Generate 0 or 1\n        if (index === 0) {\n          if (randomEnemyGameboard.placeShip(Ship('carrier', randomCoords, randomOrientation)) !== null) {\n            validPlacement = true;\n          }\n        } else if (index === 1) {\n          if (randomEnemyGameboard.placeShip(Ship('battleship', randomCoords, randomOrientation)) !== null) {\n            validPlacement = true;\n          }\n        } else if (index === 2) {\n          if (randomEnemyGameboard.placeShip(Ship('cruiser', randomCoords, randomOrientation)) !== null) {\n            validPlacement = true;\n          }\n        } else if (index === 3) {\n          if (randomEnemyGameboard.placeShip(Ship('submarine', randomCoords, randomOrientation)) !== null) {\n            validPlacement = true;\n          }\n        } else { //index must be 4\n          if (randomEnemyGameboard.placeShip(Ship('destroyer', randomCoords, randomOrientation)) !== null) {\n            validPlacement = true;\n          }\n        }\n      }\n      validPlacement = false;\n    });\n\n    return randomEnemyGameboard;\n  }\n\n  const [selectedShipType, setSelectedShipType] = useState('');\n  const [currentShipId, setCurrentShipId] = useState(0);\n  const [shipOrientations, setShipOrientations] = useState(Array(5).fill(0));\n  const [shipPlaced, setShipPlaced] = useState(Array(5).fill(false));\n  const [playerGameboard, setPlayerGameboard] = useState(Gameboard());\n  const [playerGameboardState, setPlayerGameboardState] = useState(playerGameboard.getGameboardState());\n  const [computerGameboard, setComputerGameboard] = useState(generateRandomEnemyGameboard());\n  const [computerGameboardState, setComputerGameboardState] = useState(computerGameboard.getGameboardState());\n  const [isPlayerTurn, setIsPlayerTurn] = useState(false);\n  const [isGameOver, setIsGameOver] = useState(false);\n\n\n  const handleDragShip = (shipType, shipId) => {\n    setSelectedShipType(shipType);\n    setCurrentShipId(shipId);\n  }\n\n  const handleDropShip = (playerType, coordinates, shipId) => {\n    let updatedGameboard;\n    let updatedShipsPlacedArray;\n\n    const ship = Ship(selectedShipType, coordinates, shipOrientations[shipId]);\n\n    if (playerType === 'h' && shipPlaced[shipId] === false) {\n      updatedGameboard = _.cloneDeep(playerGameboard);\n      updatedShipsPlacedArray = [...shipPlaced];\n      updatedGameboard.placeShip(ship);\n      updatedShipsPlacedArray[shipId] = true;\n      setPlayerGameboard(updatedGameboard);\n      setPlayerGameboardState(playerGameboard.getGameboardState());\n      setShipPlaced(updatedShipsPlacedArray);\n      setIsPlayerTurn(updatedShipsPlacedArray.every((placed) => {return placed === true }))\n    } \n    //We are not supposed to be dropping ships on the computer's grid, so no else statement\n\n    setSelectedShipType('');\n\n  }\n\n  const handleClickShip = (shipId, newOrientation) => {\n    const updatedOrientations = [...shipOrientations];\n    updatedOrientations[shipId] = newOrientation;\n    setShipOrientations(updatedOrientations);\n  }\n\n  const takeComputerTurn = () => {\n    let move = Math.floor(Math.random() * 100);\n    let moveX = (move % 10);\n    let moveY = (move < 10) ? 0 : Number(move.toString().substring(0,1));\n    const newPlayerGameboard = _.cloneDeep(playerGameboard);\n    let attackIsValid = newPlayerGameboard.receiveAttack([moveX, moveY]);\n    while (!attackIsValid) {\n      move = Math.floor(Math.random() * 100);\n      moveX = (move % 10);    \n      moveY = (move < 10) ? 0 : Number(move.toString().substring(0,1)); \n      attackIsValid = newPlayerGameboard.receiveAttack([moveX, moveY]);\n    }\n    if (newPlayerGameboard.allShipsAreSunk()) {\n      //end game\n      setIsGameOver(true);\n    } else {\n      setIsPlayerTurn(true);\n    }\n  }\n\n  const handleClickEnemyGrid = (coordinates, gridType, isPlayerTurn) => {\n    if (isPlayerTurn && gridType === 'c') {\n      const newComputerGameboard = _.cloneDeep(computerGameboard);\n      const attackIsValid = newComputerGameboard.receiveAttack(coordinates);\n      if (attackIsValid) {\n        setComputerGameboard(newComputerGameboard);\n        setComputerGameboardState(newComputerGameboard.getGameboardState());\n        setIsPlayerTurn(false);\n        if (newComputerGameboard.allShipsAreSunk()) {\n          //end game\n          setIsGameOver(true);\n        } else {\n          takeComputerTurn();\n        }\n      }\n    }\n  }\n\n\n  return (\n    <div className=\"App\">\n      <h1>Battleship</h1>\n      <GameComponent id=\"game\">\n        <Grid \n          playerType=\"h\"\n          drop={handleDropShip}\n          gameboard={playerGameboardState}\n          currentShipId={currentShipId}\n          isPlayerTurn={isPlayerTurn}\n          isGameOver={isGameOver}\n          clickEnemyGrid={handleClickEnemyGrid}\n        />\n        <Menu \n          drag={handleDragShip}\n          orientations={shipOrientations}\n          clickShip={handleClickShip}\n          shipOnPlayerBoard={shipPlaced}\n        />\n        <Grid \n          playerType=\"c\"\n          drop={handleDropShip}\n          gameboard={computerGameboardState}\n          currentShipId={currentShipId}\n          isPlayerTurn={isPlayerTurn}\n          isGameOver={isGameOver}\n          clickEnemyGrid={handleClickEnemyGrid}\n        />\n      </GameComponent>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}